name: Security Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  check-hash-predicates:
    name: ハッシュフィールドの不適切なプレディケート使用チェック
    runs-on: ubuntu-latest

    steps:
      - name: チェックアウト
        uses: actions/checkout@v4

      - name: ripgrepのインストール
        run: |
          sudo apt-get update
          sudo apt-get install -y ripgrep

      - name: 危険なプレディケートの使用チェック
        run: |
          echo "🔍 PasswordHashおよびRefreshTokenHashへの不適切なプレディケート使用をチェック中..."

          # 禁止されているプレディケートのパターン
          FORBIDDEN_PATTERNS=(
            'user\.PasswordHash(GT|GTE|LT|LTE|Contains|HasPrefix|HasSuffix|ContainsFold|EqualFold)\('
            'user\.RefreshTokenHash(GT|GTE|LT|LTE|Contains|HasPrefix|HasSuffix|ContainsFold|EqualFold)\('
          )

          # チェック実行
          ERROR_FOUND=false
          for pattern in "${FORBIDDEN_PATTERNS[@]}"; do
            echo "パターンをチェック: $pattern"
            matches=$(rg --line-number --no-heading \
              -g '!apps/api/ent/**' \
              -g '!**/*_test.go' \
              -e "$pattern" || true)
            
            if [ -n "$matches" ]; then
              ERROR_FOUND=true
              echo "❌ 危険なプレディケートの使用を検出しました:"
              echo "$matches"
              echo ""
            fi
          done

          if [ "$ERROR_FOUND" = true ]; then
            echo "========================================="
            echo "❌ セキュリティチェック失敗"
            echo "========================================="
            echo "ハッシュフィールド（PasswordHash、RefreshTokenHash）に対して"
            echo "順序比較や部分一致系のプレディケートは使用できません。"
            echo ""
            echo "使用可能なプレディケート:"
            echo "  - PasswordHashEQ / RefreshTokenHashEQ"
            echo "  - PasswordHashNEQ / RefreshTokenHashNEQ"
            echo "  - RefreshTokenHashIsNil / RefreshTokenHashNotNil"
            echo ""
            echo "詳細は apps/api/security_test.go を参照してください。"
            exit 1
          else
            echo "✅ セキュリティチェック成功: 危険なプレディケートの使用はありません"
          fi
