// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hideaki1979/cc-chat-app/apps/api/ent/chatroom"
)

// ChatRoom is the model entity for the ChatRoom schema.
type ChatRoom struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// チャットルーム名
	Name string `json:"name,omitempty"`
	// グループチャットかどうか
	IsGroupChat bool `json:"is_group_chat,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatRoomQuery when eager-loading is set.
	Edges        ChatRoomEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChatRoomEdges holds the relations/edges for other nodes in the graph.
type ChatRoomEdges struct {
	// RoomMembers holds the value of the room_members edge.
	RoomMembers []*RoomMember `json:"room_members,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoomMembersOrErr returns the RoomMembers value or an error if the edge
// was not loaded in eager-loading.
func (e ChatRoomEdges) RoomMembersOrErr() ([]*RoomMember, error) {
	if e.loadedTypes[0] {
		return e.RoomMembers, nil
	}
	return nil, &NotLoadedError{edge: "room_members"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e ChatRoomEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[1] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatRoom) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatroom.FieldIsGroupChat:
			values[i] = new(sql.NullBool)
		case chatroom.FieldName:
			values[i] = new(sql.NullString)
		case chatroom.FieldCreatedAt, chatroom.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case chatroom.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatRoom fields.
func (cr *ChatRoom) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatroom.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cr.ID = *value
			}
		case chatroom.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cr.Name = value.String
			}
		case chatroom.FieldIsGroupChat:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_group_chat", values[i])
			} else if value.Valid {
				cr.IsGroupChat = value.Bool
			}
		case chatroom.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cr.CreatedAt = value.Time
			}
		case chatroom.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cr.UpdatedAt = value.Time
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatRoom.
// This includes values selected through modifiers, order, etc.
func (cr *ChatRoom) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// QueryRoomMembers queries the "room_members" edge of the ChatRoom entity.
func (cr *ChatRoom) QueryRoomMembers() *RoomMemberQuery {
	return NewChatRoomClient(cr.config).QueryRoomMembers(cr)
}

// QueryMessages queries the "messages" edge of the ChatRoom entity.
func (cr *ChatRoom) QueryMessages() *MessageQuery {
	return NewChatRoomClient(cr.config).QueryMessages(cr)
}

// Update returns a builder for updating this ChatRoom.
// Note that you need to call ChatRoom.Unwrap() before calling this method if this ChatRoom
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *ChatRoom) Update() *ChatRoomUpdateOne {
	return NewChatRoomClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the ChatRoom entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *ChatRoom) Unwrap() *ChatRoom {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatRoom is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *ChatRoom) String() string {
	var builder strings.Builder
	builder.WriteString("ChatRoom(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("name=")
	builder.WriteString(cr.Name)
	builder.WriteString(", ")
	builder.WriteString("is_group_chat=")
	builder.WriteString(fmt.Sprintf("%v", cr.IsGroupChat))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChatRooms is a parsable slice of ChatRoom.
type ChatRooms []*ChatRoom
