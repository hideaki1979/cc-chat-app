// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hideaki1979/cc-chat-app/apps/api/ent/chatroom"
	"github.com/hideaki1979/cc-chat-app/apps/api/ent/roommember"
	"github.com/hideaki1979/cc-chat-app/apps/api/ent/user"
)

// RoomMember is the model entity for the RoomMember schema.
type RoomMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// チャットルームID
	RoomID uuid.UUID `json:"room_id,omitempty"`
	// ユーザーID
	UserID uuid.UUID `json:"user_id,omitempty"`
	// 参加日時
	JoinedAt time.Time `json:"joined_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomMemberQuery when eager-loading is set.
	Edges        RoomMemberEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoomMemberEdges holds the relations/edges for other nodes in the graph.
type RoomMemberEdges struct {
	// Room holds the value of the room edge.
	Room *ChatRoom `json:"room,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomMemberEdges) RoomOrErr() (*ChatRoom, error) {
	if e.Room != nil {
		return e.Room, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: chatroom.Label}
	}
	return nil, &NotLoadedError{edge: "room"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomMemberEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoomMember) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case roommember.FieldID:
			values[i] = new(sql.NullInt64)
		case roommember.FieldJoinedAt:
			values[i] = new(sql.NullTime)
		case roommember.FieldRoomID, roommember.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoomMember fields.
func (rm *RoomMember) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case roommember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rm.ID = int64(value.Int64)
		case roommember.FieldRoomID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field room_id", values[i])
			} else if value != nil {
				rm.RoomID = *value
			}
		case roommember.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				rm.UserID = *value
			}
		case roommember.FieldJoinedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joined_at", values[i])
			} else if value.Valid {
				rm.JoinedAt = value.Time
			}
		default:
			rm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoomMember.
// This includes values selected through modifiers, order, etc.
func (rm *RoomMember) Value(name string) (ent.Value, error) {
	return rm.selectValues.Get(name)
}

// QueryRoom queries the "room" edge of the RoomMember entity.
func (rm *RoomMember) QueryRoom() *ChatRoomQuery {
	return NewRoomMemberClient(rm.config).QueryRoom(rm)
}

// QueryUser queries the "user" edge of the RoomMember entity.
func (rm *RoomMember) QueryUser() *UserQuery {
	return NewRoomMemberClient(rm.config).QueryUser(rm)
}

// Update returns a builder for updating this RoomMember.
// Note that you need to call RoomMember.Unwrap() before calling this method if this RoomMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (rm *RoomMember) Update() *RoomMemberUpdateOne {
	return NewRoomMemberClient(rm.config).UpdateOne(rm)
}

// Unwrap unwraps the RoomMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rm *RoomMember) Unwrap() *RoomMember {
	_tx, ok := rm.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoomMember is not a transactional entity")
	}
	rm.config.driver = _tx.drv
	return rm
}

// String implements the fmt.Stringer.
func (rm *RoomMember) String() string {
	var builder strings.Builder
	builder.WriteString("RoomMember(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rm.ID))
	builder.WriteString("room_id=")
	builder.WriteString(fmt.Sprintf("%v", rm.RoomID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", rm.UserID))
	builder.WriteString(", ")
	builder.WriteString("joined_at=")
	builder.WriteString(rm.JoinedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RoomMembers is a parsable slice of RoomMember.
type RoomMembers []*RoomMember
